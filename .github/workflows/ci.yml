name: CFD Simulation CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev build-essential xvfb
        # 設置虛擬顯示（用於GUI測試）
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 &
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # 為CI環境設置Taichi CPU後端
        export TI_ARCH=cpu
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist coverage[toml]
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # 只檢查嚴重的語法錯誤
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.backup_archive,backups
        # 使用配置文件進行完整檢查（但不強制失敗）
        flake8 . --count --exit-zero --statistics

    - name: Install ripgrep for policy checks
      run: |
        sudo apt-get update
        sudo apt-get install -y ripgrep

    - name: Enforce import policies (no legacy paths, no config.config)
      run: |
        set -e
        echo "Checking for forbidden legacy imports (Python sources only, excluding backups)..."
        if rg -n -t py -g '!backups/**' "from\\s+src\\.core\\.legacy\\.|import\\s+src\\.core\\.legacy\\." -S .; then
          echo "❌ Forbidden legacy imports found" && exit 1
        else
          echo "✅ No legacy imports"
        fi
        echo "Checking for deprecated config imports (Python sources only, excluding backups)..."
        if rg -n -t py -g '!backups/**' "^\s*import\\s+config\\.config(\\s|$)" -S .; then
          echo "❌ Deprecated config.config imports found" && exit 1
        else
          echo "✅ No deprecated config.config imports"
        fi
        
    - name: Type checking with mypy
      run: |
        pip install mypy
        mypy --ignore-missing-imports --strict-optional main.py src/core/lbm_solver.py
      continue-on-error: true
        
    - name: Run unit tests with coverage
      env:
        CI: true
        DISPLAY: :99
      run: |
        coverage run -m pytest tests/ -v --tb=short -x
        coverage xml
        coverage report
        
    - name: Run integration tests
      env:
        CI: true
        DISPLAY: :99
      run: |
        python ci_smoke_test.py
      continue-on-error: false
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage

  benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run performance benchmarks
      env:
        CI: true
        DISPLAY: :99
      run: |
        python benchmarks/benchmark_suite.py --output benchmark_results.json
      continue-on-error: true
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.json

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run security checks with bandit
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json